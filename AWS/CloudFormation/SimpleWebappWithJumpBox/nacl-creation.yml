---
AWSTemplateFormatVersion: "2010-09-09"

Description: >
  The template is used to create a NACL for public and private subnets.

#
#PARAMETERS used to Create Ec2 Instances
#
Parameters:
  VPC:
    Description: The VPC ID
    Type: String
  VPCCIDR:
    Description: The CIDR of VPC
    Type: String
  PublicSubnet1: 
    Description: The PublicSubnet1 value of VPC
    Type: String
  PublicSubnet2: 
    Description: The PublicSubnet1 value of VPC
    Type: String
  PublicSubnet3: 
    Description: The PublicSubnet1 value of VPC
    Type: String
  PrivateSubnet1: 
    Description: The PrivateSubnet1 value of VPC
    Type: String
  PrivateSubnet2: 
    Description: The PrivateSubnet2 value of VPC
    Type: String
  PrivateSubnet3: 
    Description: The PrivateSubnet3 value of VPC
    Type: String
  Environment:
    Description: The application environment
    Type: String
  StackName:
    Description: The Root stack name
    Type: String

#
#RESOURCES created
#
Resources:

#NACL for public subnets
  NACLPublic:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref VPC
       Tags:
       - Key: Name
         Value: !Join [ "-", [ "nacl",!Ref "AWS::Region",!Ref Environment,"public",!Ref StackName  ] ]
       - Key: Environment
         Value: !Ref Environment

#Allow ssh(22) for inbound communication
  InboundRulePublicSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref NACLPublic
       RuleNumber: 100
       Protocol: 6
       Egress: false
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 22
         To: 22

#Allow HTTP(80) for inbound communication
  InboundRulePublicHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref NACLPublic
       RuleNumber: 200
       Protocol: 6
       Egress: false
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80

#Allow HTTPS(443) for inbound communication
  InboundRulePublicHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref NACLPublic
       RuleNumber: 250
       Protocol: 6
       Egress: false
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443

#Allow Ports 1024-65535 for inbound communication
  InboundRulePublicAllowConnections:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref NACLPublic
       RuleNumber: 300
       Protocol: 6
       Egress: false
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 1024
         To: 65535

#Allow Ports 1024-65535 for outbound communication 
  OutboundRulePublicAllowConnections:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref NACLPublic
       RuleNumber: 300
       Protocol: 6
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 1024
         To: 65535

#Allow SSH(22) for outbound communication
  OutboundRulePublicSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref NACLPublic
       RuleNumber: 100
       Protocol: 6
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 22
         To: 22

#Allow HTTP(80) for outbound communication
  OutboundRulePublicHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref NACLPublic
       RuleNumber: 200
       Protocol: 6
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80

#Allow HTTPS(443) for inbound communication
  OutboundRulePublicHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref NACLPublic
       RuleNumber: 250
       Protocol: 6
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443

#Associate public subnets with NACL
  Subnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PublicSubnet1
       NetworkAclId: !Ref NACLPublic
  Subnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PublicSubnet2
       NetworkAclId: !Ref NACLPublic
  Subnet3NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PublicSubnet3
       NetworkAclId: !Ref NACLPublic


#NACL for private subnets
  NACLPrivate:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref VPC
       Tags:
       - Key: Name
         Value: !Join [ "-", [ "nacl",!Ref "AWS::Region",!Ref Environment,"private",!Ref StackName  ] ]
       - Key: Environment
         Value: !Ref Environment

#Allow ssh(22) for inbound communication within VPC
  InboundRulePrivateSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACLPrivate
      RuleNumber: 100
      Protocol: 6
      Egress: false
      RuleAction: allow
      CidrBlock: !Ref VPCCIDR
      PortRange:
        From: 22
        To: 22

#Allow Port 3306(SQL) for inbound communication within VPC
  InboundRulePrivateSQL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACLPrivate
      RuleNumber: 150
      Protocol: 6
      Egress: false
      RuleAction: allow
      CidrBlock: !Ref VPCCIDR
      PortRange:
        From: 3306
        To: 3306

#Allow Ports 1024-65535 for outbound communication within VPC
  OutboundRulePrivateAllowConnections:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref NACLPrivate
       RuleNumber: 100
       Protocol: 6
       Egress: true
       RuleAction: allow
       CidrBlock: !Ref VPCCIDR
       PortRange:
         From: 1024
         To: 65535

#Associate private subnets with NACL  
  PrivateSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PrivateSubnet1
       NetworkAclId: !Ref NACLPrivate
  PrivateSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PrivateSubnet2
       NetworkAclId: !Ref NACLPrivate
  PrivateSubnet3NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref PrivateSubnet3
       NetworkAclId: !Ref NACLPrivate

#
#OUTPUT - these values can be used outside the stack
#
Outputs:
#NACL Created
  NACLPublic:
     Description: The NACL created in the stack
     Value: !Ref NACLPublic
  NACLPrivate:
     Description: The NACL created in the stack
     Value: !Ref NACLPrivate